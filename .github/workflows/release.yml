name: Release

on:
    push:
        tags:
            - "v*.*.*"

permissions:
    contents: write

jobs:
    build:
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]

        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Install Linux dependencies
              if: matrix.os == 'ubuntu-latest'
              run: sudo apt-get update && sudo apt-get install -y libasound2-dev

            - name: Set up Rust
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  override: true
                  components: rustfmt

            - name: Build
              run: cargo build --release

            - name: Rename binary
              run: |
                  if [ "${{ matrix.os }}" = "windows-latest" ]; then
                    mv target/release/terminal_timer.exe target/release/terminal_timer_windows.exe
                  elif [ "${{ matrix.os }}" = "macos-latest" ]; then
                    mv target/release/terminal_timer target/release/terminal_timer_macos
                  else
                    mv target/release/terminal_timer target/release/terminal_timer_linux
                  fi
              shell: bash

            - name: Create Release
              id: create_release
              run: |
                  echo "Creating release..."
                  echo "::set-output name=tag::${GITHUB_REF#refs/tags/}"
                  echo "::set-output name=version::${GITHUB_REF#refs/tags/v}"

            - name: Upload Release Asset
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ steps.create_release.outputs.tag }}
                  files: |
                      ${{ matrix.os == 'windows-latest' && 'target/release/terminal_timer_windows.exe' || (matrix.os == 'macos-latest' && 'target/release/terminal_timer_macos' || 'target/release/terminal_timer_linux') }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
