name: Release

on:
    push:
        tags:
            - "v*.*.*"

permissions:
    contents: write

jobs:
    build:
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]

        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Install Linux dependencies
              if: matrix.os == 'ubuntu-latest'
              run: sudo apt-get update && sudo apt-get install -y libasound2-dev

            - name: Set up Rust
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  override: true
                  components: rustfmt

            - name: Build
              run: cargo build --release

            - name: Create Release Metadata (bash)
              id: create_release
              if: matrix.os != 'windows-latest'
              shell: bash
              run: |
                  tag="${GITHUB_REF#refs/tags/}"
                  version="${tag#v}"
                  echo "tag=$tag" >> $GITHUB_OUTPUT
                  echo "version=$version" >> $GITHUB_OUTPUT

            - name: Create Release Metadata (PowerShell)
              id: create_release_windows
              if: matrix.os == 'windows-latest'
              shell: pwsh
              run: |
                  $tag = $env:GITHUB_REF -replace '^refs/tags/', ''
                  $version = $tag -replace '^v', ''
                  echo "tag=$tag" >> $env:GITHUB_OUTPUT
                  echo "version=$version" >> $env:GITHUB_OUTPUT

            - name: Debug version (Windows)
              if: matrix.os == 'windows-latest'
              run: echo "Version is ${{ steps.create_release_windows.outputs.version }}"
              shell: pwsh

            - name: Debug version (Linux/macOS)
              if: matrix.os != 'windows-latest'
              run: echo "Version is ${{ steps.create_release.outputs.version }}"
              shell: bash

            - name: Set Cargo.toml version to match Git tag (Windows)
              if: matrix.os == 'windows-latest'
              shell: pwsh
              run: |
                  $version = $env:GITHUB_REF -replace 'refs/tags/v', ''
                  Write-Output "Updating Cargo.toml version to $version"
                  (Get-Content Cargo.toml) -replace '^version = ".*"', "version = `"$version`"" | Set-Content Cargo.toml

            - name: Install cargo-wix and WiX Toolset
              if: matrix.os == 'windows-latest'
              shell: pwsh
              run: |
                  # Install WiX Toolset
                  choco install wixtoolset -y
                  $wixPath = Get-ChildItem "C:\Program Files (x86)" -Directory | Where-Object { $_.Name -like "WiX Toolset v*" } | Sort-Object Name -Descending | Select-Object -First 1
                  if ($wixPath) {
                    $env:Path += ";$($wixPath.FullName)\bin"
                  } else {
                    Write-Error "WiX Toolset not found in Program Files (x86)"
                    exit 1
                  }
                  # Install cargo-wix
                  cargo install cargo-wix

            - name: Build Windows installer with cargo wix
              if: matrix.os == 'windows-latest'
              run: |
                  cargo wix

            - name: Rename Windows MSI and EXE with version and arch
              if: matrix.os == 'windows-latest'
              shell: pwsh
              run: |
                  mkdir application
                  $version = "${{ steps.create_release_windows.outputs.version }}"
                  $arch = "x86_64"
                  $newNameBase = "terminal_timer-$version-$arch-windows"

                  # Find the MSI file in target\wix
                  $msiFile = Get-ChildItem ".\target\wix\*.msi" | Select-Object -First 1

                  if (-not $msiFile) {
                      Write-Error "MSI file not found in target\wix"
                      exit 1
                  }

                  # Rename and move MSI
                  Move-Item $msiFile.FullName -Destination "application\$newNameBase.msi"

                  # Rename and move EXE
                  Move-Item ".\target\release\terminal_timer.exe" -Destination "application\$newNameBase.exe"

            - name: Rename macOS binary with version and arch
              if: matrix.os == 'macos-latest'
              run: |
                  version=${{ steps.create_release.outputs.version }}
                  arch=$(uname -m)
                  newName="terminal_timer-$version-$arch-macos"
                  mv target/release/terminal_timer target/release/$newName
                  chmod +x target/release/$newName

            - name: Rename Linux binary with version and arch
              if: matrix.os == 'ubuntu-latest'
              run: |
                  version=${{ steps.create_release.outputs.version }}
                  arch=$(uname -m)
                  newName="terminal_timer-$version-$arch-linux"
                  mv target/release/terminal_timer target/release/$newName
                  chmod +x target/release/$newName
                  gzip -c target/release/$newName > target/release/$newName.gz

            - name: Upload Release Assets (Windows)
              if: matrix.os == 'windows-latest'
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ steps.create_release_windows.outputs.tag }}
                  files: |
                      application/terminal_timer-${{ steps.create_release_windows.outputs.version }}-x86_64-windows.exe
                      application/terminal_timer-${{ steps.create_release_windows.outputs.version }}-x86_64-windows.msi
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Get architecture (macOS/Linux)
              if: matrix.os != 'windows-latest'
              id: arch
              run: echo "arch=$(uname -m)" >> $GITHUB_OUTPUT

            - name: Upload Release Assets (macOS)
              if: matrix.os == 'macos-latest'
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ steps.create_release.outputs.tag }}
                  files: |
                      target/release/terminal_timer-${{ steps.create_release.outputs.version }}-${{ steps.arch.outputs.arch }}-macos
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Upload Release Assets (Linux)
              if: matrix.os == 'ubuntu-latest'
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ steps.create_release.outputs.tag }}
                  files: |
                      target/release/terminal_timer-${{ steps.create_release.outputs.version }}-${{ steps.arch.outputs.arch }}-linux.gz
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
